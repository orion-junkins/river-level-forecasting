# %%
"""
# Inference Forecaster Demo

Executing inference requires loading the appropriate data, a trained model, and then making predictions.
We have bundled that functionality into only a few steps

## Data Fetching

The inference forecaster needs a `CatchmentData` object in order to access the data needed for predictions.
Building that requires a couple separate objects, but most importantly you will need to have selected a gauge ID and have the list of coordinates for that catchment.
Note: the coordinates must be the same that were trained on.
"""

# %%
import json
from typing import List, Optional
from rlf.forecasting.catchment_data import CatchmentData
from rlf.forecasting.data_fetching_utilities.coordinate import Coordinate
from rlf.forecasting.data_fetching_utilities.level_provider.level_provider_nwis import LevelProviderNWIS
from rlf.forecasting.data_fetching_utilities.weather_provider.api_weather_provider import APIWeatherProvider
from rlf.forecasting.inference_forecaster import InferenceForecaster
from rlf.types import GeoJSONFeature

def get_coordinates_for_catchment(filename: str, gauge_id: str) -> Optional[List[Coordinate]]:
    """Get the list of coordinates for a specific gauge ID from a geojson file.

    Args:
        filename (str): geojson file that contains catchment information.
        gauge_id (str): gauge ID to retrieve coordinates for.

    Returns:
        Optional[List[Coordinate]]: List of coordinates for the given gauge or None if the gauge could not be found.
    """
    with open(filename) as f:
        target = json.load(f)

    for feature in target["features"]:
        if feature["properties"]["gauge_id"] == gauge_id:
            coordinates = [Coordinate(lon, lat) for lon, lat in feature["geometry"]["coordinates"]]
            return coordinates

    return None


coordinates = get_coordinates_for_catchment("data/catchments_short.json", "12143400")

inference_weather_provider = APIWeatherProvider(coordinates)
inference_level_provider = LevelProviderNWIS("12143400")
inference_catchment_data = CatchmentData("12143400", inference_weather_provider, inference_level_provider)

# %%
"""
## Create the Forecaster

Creating the forecaster only requires a `CatchmentData` object and the path to the trained models.
In order to train models see the `TrainingForecaster`.
The optional argument `load_cpu` is a flag that, when True, will cause the forecaster to attempt to load models such that they can inference on the CPU.
This is helpful when the model had been trained on a GPU, but the inference is now happening on a CPU.
"""

# %%

forecaster = InferenceForecaster(inference_catchment_data, "trained_models/RNN/Huber/remote_50", load_cpu=True)

# %%
"""
## Generate Predictions

As many predictions as there is available data can be generated by calling the `predict` method.
The predictions are all rescaled such that they should be in physical units again and not scaled down.
"""

# %%
fcast = forecaster.predict(24)
c_fcast = forecaster.predict_contributing_models(24)

# %%
"""
### Example Output

|     datetime      |  level   |
| ----------------- | -------- |
|2023-02-24 06:00:00|369.489258|
|2023-02-24 07:00:00|393.495514|
|2023-02-24 08:00:00|426.247955|
|2023-02-24 09:00:00|461.837036|
|2023-02-24 10:00:00|499.811432|
| ... | ... |
"""
