#%%
"""
# Inference Forecaster Demo

Executing inference requires loading the appropriate data, a trained model, and then making predictions.
We have bundled that functionality into only a few steps

## Data Fetching

The inference forecaster needs a `CatchmentData` object in order to access the data needed for predictions.
Building that requires a couple separate objects, but most importantly you will need to have selected a gauge ID and have the list of coordinates for that catchment.
Note: the coordinates must be the same that were trained on.
"""

#%%
from rlf.forecasting.data_fetching_utilities.weather_provider.api_weather_provider import APIWeatherProvider
from rlf.forecasting.inference_forecaster import InferenceForecaster

target = {
    "type": "Feature",
    "bbox": [-122.35518187, 45.8404293, -122.06136614, 45.96773756],
    "properties": {
        "gauge_id": "14219000",
        "gauge_name": "CANYON CREEK NEAR AMBOY, WA",
        "area_sq_km": 172.138
    },
    "geometry": {
        "type": "MultiPoint",
        "coordinates": [
            [-122.4, 45.8], [-122.3, 45.8], [-122.2, 45.8],
            [-122.1, 45.8], [-122.0, 45.8], [-122.4, 45.9],
            [-122.3, 45.9], [-122.2, 45.9], [-122.1, 45.9],
            [-122.0, 45.9], [-122.4, 46.0], [-122.3, 46.0],
            [-122.2, 46.0], [-122.1, 46.0], [-122.0, 46.0]
        ]
    }
}

coordinates = [Coordinate(lon, lat) for lon, lat in target["geometry"]["coordinates"]]

inference_weather_provider = APIWeatherProvider(coordinates)
inference_level_provider = LevelProviderNWIS(target["properties"]["gauge_id"])
inference_catchment_data = CatchmentData(target["properties"]["gauge_id"], inference_weather_provider, inference_level_provider)

# %%
"""
## Create the Forecaster

Creating the forecaster only requires a `CatchmentData` object and the path to the trained models.
In order to train models see the `TrainingForecaster`.
The optional argument `load_cpu` is a flag that, when True, will cause the forecaster to attempt to load models such that they can inference on the CPU.
This is helpful when the model had been trained on a GPU, but the inference is now happening on a CPU.
"""

# %%

forecaster = InferenceForecaster(inference_catchment_data, "/path/to/trained_models", load_cpu=True)

# %%
"""
## Generate Predictions

As many predictions as there is available data can be generated by calling the `predict` method.
The predictions are all rescaled such that they should be in physical units again and not scaled down.
"""

# %%
forecaster.predict(96)

# %%
"""
### Example Output

|     datetime      |  level   |
| ----------------- | -------- |
|2023-02-24 06:00:00|369.489258|
|2023-02-24 07:00:00|393.495514|
|2023-02-24 08:00:00|426.247955|
|2023-02-24 09:00:00|461.837036|
|2023-02-24 10:00:00|499.811432|
| ... | ... |
"""
